# ==============================================================================
# GitHub Actions Workflow to build a static OpenSSH binary for
# OpenWrt Chaos Calmer (ARMv5 / armel / musl-libc)
# ==============================================================================

# Defines the name of the workflow, which will be displayed on the Actions tab.
name: Build Static OpenSSH for OpenWrt (ARMv5)

# --- Triggers ---
# Specifies the events that trigger this workflow.
on:
  # Run the workflow on any push to the 'main' or 'master' branch.
  push:
    branches: [ "main", "master" ]

  # Allows you to run this workflow manually from the Actions tab on GitHub.
  # This is useful for on-demand builds without pushing new code.
  workflow_dispatch:

# --- Jobs ---
# Defines the set of jobs to be executed.
jobs:
  # A single job named 'build-static-openssh'.
  build-static-openssh:
    # Specifies the type of machine to run the job on.
    # 'ubuntu-latest' provides a standard, reliable, and up-to-date Linux environment.
    runs-on: ubuntu-latest

    # --- Steps ---
    # A sequence of tasks that make up the job.
    steps:
      # Step 1: Checkout the repository code
      # This action checks out your repository, so the workflow can access the Dockerfile.
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Set up QEMU for multi-architecture support
      # This is a crucial step that enables the runner to build for non-x86 architectures.
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Step 3: Set up Docker Buildx
      # This action sets up the advanced Docker build engine needed for multi-platform builds.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 4: Build the OpenSSH binaries using our custom Dockerfile
      # This is the main step where all the compilation magic happens.
      - name: Build with Dockerfile for ARMv5 (musl)
        run: |
          docker buildx build \
            --platform linux/arm/v5 \
            --output type=local,dest=./openssh-openwrt-dist \
            .

      # Step 5: Upload the compiled files as a workflow artifact
      # This step takes the output from the build and makes it available for download.
      - name: Upload Compiled Artifact
        uses: actions/upload-artifact@v4
        with:
          # The name of the artifact that will appear on the workflow summary page.
          name: openssh-openwrt-static-armel
          # The path to the directory containing the files to be uploaded.
          path: ./openssh-openwrt-dist/

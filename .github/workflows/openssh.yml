name: Build OpenSSH for ARMv5 with uClibc

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          wget \
          tar \
          bzip2 \
          xz-utils \
          python3 \
          libncurses5-dev \
          git \
          autoconf \
          automake \
          libtool \
          pkg-config
    
    - name: Setup build environment
      run: |
        mkdir -p $HOME/arm-toolchain
        mkdir -p $HOME/build
        echo "TOOLCHAIN_DIR=$HOME/arm-toolchain" >> $GITHUB_ENV
        echo "BUILD_DIR=$HOME/build" >> $GITHUB_ENV
        echo "PREFIX=$HOME/arm-toolchain/usr" >> $GITHUB_ENV
    
    - name: Download and build Buildroot toolchain
      run: |
        cd $BUILD_DIR
        wget https://buildroot.org/downloads/buildroot-2023.11.tar.gz
        tar xzf buildroot-2023.11.tar.gz
        cd buildroot-2023.11
        
        # Create minimal config for ARMv5 with uClibc
        cat > .config << 'EOF'
        BR2_arm=y
        BR2_arm926t=y
        BR2_TOOLCHAIN_BUILDROOT=y
        BR2_TOOLCHAIN_BUILDROOT_UCLIBC=y
        BR2_KERNEL_HEADERS_5_15=y
        BR2_BINUTILS_VERSION_2_39_X=y
        BR2_GCC_VERSION_12_X=y
        BR2_TOOLCHAIN_BUILDROOT_CXX=y
        BR2_GCC_ENABLE_LTO=y
        BR2_PACKAGE_HOST_GDB=y
        BR2_INET_IPV6=y
        BR2_TOOLCHAIN_BUILDROOT_WCHAR=y
        BR2_TOOLCHAIN_BUILDROOT_LOCALE=y
        BR2_PTHREADS_NATIVE=y
        BR2_TOOLCHAIN_HAS_SSP=y
        BR2_ENABLE_LOCALE_PURGE=y
        BR2_ENABLE_LOCALE_WHITELIST="C en_US"
        BR2_TARGET_OPTIMIZATION="-Os -pipe"
        BR2_TARGET_LDFLAGS=""
        BR2_TOOLCHAIN_BUILDROOT_VENDOR="arm5"
        BR2_PACKAGE_OVERRIDE_FILE="$(CONFIG_DIR)/local.mk"
        BR2_GLOBAL_PATCH_DIR=""
        EOF
        
        make olddefconfig
        make toolchain -j$(nproc)
        
        # Export toolchain
        cp -r output/host/* $TOOLCHAIN_DIR/
        
    - name: Set toolchain environment
      run: |
        echo "PATH=$TOOLCHAIN_DIR/bin:$PATH" >> $GITHUB_ENV
        echo "CROSS_COMPILE=arm-arm5-linux-uclibcgnueabi-" >> $GITHUB_ENV
        echo "CC=arm-arm5-linux-uclibcgnueabi-gcc" >> $GITHUB_ENV
        echo "CXX=arm-arm5-linux-uclibcgnueabi-g++" >> $GITHUB_ENV
        echo "AR=arm-arm5-linux-uclibcgnueabi-ar" >> $GITHUB_ENV
        echo "LD=arm-arm5-linux-uclibcgnueabi-ld" >> $GITHUB_ENV
        echo "STRIP=arm-arm5-linux-uclibcgnueabi-strip" >> $GITHUB_ENV
    
    - name: Build zlib
      run: |
        cd $BUILD_DIR
        wget https://zlib.net/zlib-1.3.tar.gz
        tar xzf zlib-1.3.tar.gz
        cd zlib-1.3
        
        CHOST=arm-arm5-linux-uclibcgnueabi \
        ./configure --prefix=$PREFIX --static
        make -j$(nproc)
        make install
    
    - name: Build OpenSSL
      run: |
        cd $BUILD_DIR
        wget https://www.openssl.org/source/openssl-3.0.12.tar.gz
        tar xzf openssl-3.0.12.tar.gz
        cd openssl-3.0.12
        
        ./Configure linux-armv4 \
          --prefix=$PREFIX \
          --cross-compile-prefix=arm-arm5-linux-uclibcgnueabi- \
          no-shared \
          no-threads \
          no-asm
        
        make -j$(nproc)
        make install_sw
    
    - name: Get latest OpenSSH version
      id: openssh_version
      run: |
        LATEST_VERSION=$(curl -s https://www.openssh.com/portable.html | grep -oP 'openssh-\K[0-9]+\.[0-9]+p[0-9]+' | head -1)
        echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT
        echo "Latest OpenSSH version: $LATEST_VERSION"
    
    - name: Build OpenSSH
      run: |
        cd $BUILD_DIR
        OPENSSH_VERSION="${{ steps.openssh_version.outputs.version }}"
        wget https://cdn.openbsd.org/pub/OpenBSD/OpenSSH/portable/openssh-${OPENSSH_VERSION}.tar.gz
        tar xzf openssh-${OPENSSH_VERSION}.tar.gz
        cd openssh-${OPENSSH_VERSION}
        
        # Configure OpenSSH
        ./configure \
          --host=arm-arm5-linux-uclibcgnueabi \
          --prefix=/usr \
          --sysconfdir=/etc/ssh \
          --with-zlib=$PREFIX \
          --with-ssl-dir=$PREFIX \
          --disable-strip \
          --disable-lastlog \
          --disable-utmp \
          --disable-utmpx \
          --disable-wtmp \
          --disable-wtmpx \
          --disable-pututline \
          --disable-pututxline \
          --without-rpath \
          --without-pam \
          --without-selinux \
          LDFLAGS="-static -L$PREFIX/lib" \
          CFLAGS="-Os -I$PREFIX/include"
        
        make -j$(nproc)
        
        # Create output directory
        mkdir -p $HOME/openssh-arm5-output/bin
        mkdir -p $HOME/openssh-arm5-output/etc/ssh
        
        # Copy binaries
        cp ssh sshd scp sftp ssh-keygen ssh-agent ssh-add $HOME/openssh-arm5-output/bin/
        
        # Strip binaries
        arm-arm5-linux-uclibcgnueabi-strip $HOME/openssh-arm5-output/bin/*
        
        # Copy config files
        cp ssh_config sshd_config $HOME/openssh-arm5-output/etc/ssh/
    
    - name: Create archive
      run: |
        cd $HOME
        tar czf openssh-${{ steps.openssh_version.outputs.version }}-arm5-uclibc.tar.gz -C openssh-arm5-output .
        
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: openssh-arm5-uclibc
        path: ~/openssh-*.tar.gz
    
    - name: Display build info
      run: |
        echo "Build complete!"
        echo "OpenSSH version: ${{ steps.openssh_version.outputs.version }}"
        echo "Target: ARMv5 with uClibc"
        file $HOME/openssh-arm5-output/bin/ssh
        arm-arm5-linux-uclibcgnueabi-size $HOME/openssh-arm5-output/bin/*
